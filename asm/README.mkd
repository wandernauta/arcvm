
libchk
------

The libchk utility library provides macros and subroutines that facilitate
testing and debugging libraries and user code.


**abort**: Immediately stops execution.


**ae**: Assert equal (assembler macro)

Asserts that the zero bit is set. Useful for checking expectations.
!
**an**: Assert never (arcpp macro)
!
Asserts that the instruction is never executed.

libchr
------

Provides arcpp macros from A to Z that expand to their ASCII value. _ expands
to 0x20, an ASCII space.


libcol
------

The libcol library provides assemble-time constants that expand to 8-bit
color values. The color values can be written to the screen directly.


**BLACK**: Pitch black.

**BLUE**: Bright blue.

**BROWN**: Brownish.

**CYAN**: Very bright blue.

**GREEN**: Bright green.

**MAROON**: Dark red.

**NAVY**: Dark blue.

**OLIVE**: Muddy green.

**ORANGE**: Bright orange.

**PINK**: Hot pink.

**RED**: Bright red.

**WHITE**: Full white.

**YELLOW**: Bright yellow.

libcon
------

The libcon library provides subroutines for outputting text.


**putc**: Writes the character (unsigned 8-bit) in %r3 to the console.


**getc**: Waits for and reads a character (unsigned 8-bit) to register %r3.


libdev
------

The libdev library provides higher-level access to virtual peripherals.


**COUT**: Console output port offset (8 bits)

**COSTAT**: Console status port offset (8 bits)

**CIN**: Keyboard input port offset (8 bits)

**CICTL**: Keyboard status port offset (8 bits)

**V_COLOR**: Video color port offset (8 bits)

Color (pixel) data should be written to this port. Writing to this port
'paints' the pixel on the screen.

**V_CMD**: Video command port offset (8 bits)

Write a byte to this port to update the screen. The store operation will
return when the screen is updated - this can take multiple milliseconds
depending on configuration.

**V_ADDR_X**: Video X coordinate port offset

Write the X coordinate of the pixel you want to paint to this port before
writing the color.

**V_ADDR_Y**: Video Y coordinate port offset

Write the Y coordinate of the pixel you want to paint to this port before
writing the color.

**SCREENW**: The width of the virtual screen in pixels

**SCREENH**: The height of the virtual screen in pixels

**MEM_IO**: The begin of the I/O mapped memory space, in bytes. 

libfnt
------

The libfnt library contains subroutines that draw text to the screen in a
simple bitmap font.


**fnt(char, x, y, color)**: Draws a character at position x, y (arcpp macro)

The position is measured in 'tiles', i.e. multiples of 8 pixels. The char
argument should be an uppercase ASCII character.


libgfx
------

The libgfx library provides higher-level subroutines and utilities for using the virtual display.
These macros load the memory offset into register %r1.


**gfxx**: Sets the video X cursor to the position given register


**gfxy**: Sets the video Y cursor to the position given register


**gfxx**: Writes the color in the given register to the screen


**gfxsync**: Updates the display


liblib
------

The liblib library contains support subroutines and macros for building ARC
libraries.

**data**: Begins a non-executed region. (arcpp macro)

Any constants should be put in a non-executed region to prevent them from
being interpreted as instructions. Expands to a branch-always instruction.

**enddata**: Ends a non-executed region. (arcpp macro)

This macro expands to a label that matches the label branched to by the
data() macro.

**mangle**: Adds the required name mangling to use names in macro's. (arcpp macro)

Used by the const and equ macro's.

**const**: Define an in-memory value. (arcpp macro)

Expands to an in-memory value (i.e. a label followed by raw data) in both
mangled and unmangled forms. Should be contained in data()/enddata() pairs
to prevent execution.

**equ**: Define an assembly-time value. (arcpp macro)

Expands to both an unmangled and a mangled .equ - an assembly-time constant.

**ret**: Expands to a subroutine return. (arcpp macro)

A shorter way to write `jmpl %r15 + 4, %r0`.

libmem
------

The libmem library provides higher-level access to the ARC memory subsystem.


**memchr**: Searches %r3 for %r4 stopping at %r5

This subroutine is similar to the C memchr function. It searches a memory
area starting at the address in %r3 for the byte in %r4. The address of the
first byte that matches %r4 is put in %r3. If, after %r5-%r3 bytes, nothing has
matched, %r4 is equal to %r5.


**memcpy**: Fills %r3 with %r5 bytes from %r4.

Similar to the memcpy function in C, this subroutine copies bytes from the
memory address starting at %r4 to the memory address starting at %r3. In total,
%r5 bytes are copied.


**memset**: Set a memory area from %r3 to %r5 to the constant byte in %r4.


**memfrob**: Frobnicates the memory area from %r3 to %r5.

A fast memory frobnicator. Frobnicate the memory area again to defrobnicate
it.

